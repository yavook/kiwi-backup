#!/bin/sh

this_script="$( readlink -f "${0}" )"
this_dir="${this_script%/*}"

# files
duplicity_secrets_file="/root/duplicity_secrets"

run_webhook() { #url #message
    if [ -z "${WEBHOOK_URL}" ]; then
        return 1
    fi

    _rw_message="$(echo "${2}" | sed "s,\s,%20,g" )"
    _rw_webhook_url="$(echo "${1}" | sed "s,%%MSG%%,${_rw_message},g" )"

    _rw_curl_args=""
    if [ "${WEBHOOK_INSECURE}" = "1" ]; then
        _rw_curl_args="--insecure"
    fi

    curl ${_rw_curl_args} "${_rw_webhook_url}" 1>/dev/null 2>/dev/null
}

# load secrets file
if [ -f "${duplicity_secrets_file}" ]; then
    # shellcheck disable=SC1090
    . "${duplicity_secrets_file}"
fi

# handle more verbose "GPG_PASSPHRASE" env var
if [ -n "${GPG_PASSPHRASE}" ]; then
    PASSPHRASE="${GPG_PASSPHRASE:-${PASSPHRASE}}"
    export PASSPHRASE
    unset GPG_PASSPHRASE
fi

# run start webhook
run_webhook "${WEBHOOK_URL}" "running task ${*}"

# hand over
set -ex
eval "$( \
    "${this_dir}/build_command" \
    "${@}" \
)"
exit_status="${?}"

# run finish webhook
if [ "${exit_status}" -eq "0" ]; then
    run_webhook "${WEBHOOK_URL}" "task ${*} successful"

else
    run_webhook "${WEBHOOK_FAIL_URL:-${WEBHOOK_URL}}" "task ${*} failed, status ${exit_status}"

fi
